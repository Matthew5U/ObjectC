_________________________________________________________________________________________________
Obiektowy kurs c++ notatki by Mateusz Krajewski
_________________________________________________________________________________________________
-------------------------------------------------------------------------------------------------
Szablon:
-------------------------------------------------------------------------------------------------

#include <iostream>

using namespace std;

int main() 
{   
    cout << endl;

    cout << " " << endl; 
	
    cout << endl;
    return 0;
}

-------------------------------------------------------------------------------------------------
Słownik:
OOP - Object Oriented Programmin
**********************************
-class - zbior inforamcji czym jest obiekt - jak jest tworzony oraz jakie posiada cechy w programie
(Zbior wszystkich cech obiektu) (KLASA TO WLASNY TYP DANYCH)
-object - dajacy sie wyodrebnic element rzeczywistosci
-Metoda - klasa zawierajaca funckje oddzialuje na reszte programu
**********************************
Klasa to przepis na to jak utworzyc obiekt
Obiekt jest reprezentantem klasy, utworzonym wedlug tego przepisu

program komputerowy - zbior obiektow komunikujacyhc sie pomiedzy soba w celu wykonywania zadan, a
kazdy obiekt stowrzony jest wedlug przepisu podanego w klasie

-------------------------------------------------------------------------------------------------
Wskazowka:
Zalety OOP:
-ponowne uzycie kodow
-łatwa lokalizacja bledu
-lepsze odzworowanie rzeczywistosci w aplikacji
-hermetyzacja danych
-skalowalnosc kodu
-latwy podzial prac
-mechanizmy dziedziczenia i polimorfizmu
-lepsze wykorzystanie pamieci w programie

-------------------------------------------------------------------------------------------------
Kurs 1. 
-------------------------------------------------------------------------------------------------
Klasa to przepis na to jak utworzyc obiekt
Obiekt jest reprezentantem klasy, utworzonym wedlug tego przepisu
Metoda - funkcja w klasie

klasa = cechy(atrybut) + funkcje

funkcja - funkcja poza klasa
metoda - funkcja wewnatrz klasy

Zmienne tworzy sie w klasie dla kazdego obiektu ale metody juz tylko raz dla zaoszczedzenia pamieci

klasy umownie pisze sie z duzej litery

Dostep do zmiennych:
-public - dostep do wnetrza klasy wszystkim funkcjom

class Animal <-- Nazwa klasy z duej litery
{

}; <-- srednik odroznia klase od funkcji

clasa obiekt;
obiekt.wartoscWKlasie - odwolanie sie do cechy w klasie

pierwszy.cpp - dwie klasy (zrozumienie czy m jest kalsa i obiekt i jak ich sotosowac)

-------------------------------------------------------------------------------------------------
Kurs 2. 
-------------------------------------------------------------------------------------------------
Programowanie wstepujace ( od szczegolu do ogolu):
>Rozwiazanie problemu polegajace na przygotowanieu modulow potrzebnych do rozwiazania problemu 
a nastepnie polaczenie ich w jedna palikacj

Programowanie zstepujace ( od ogolu do szczegolu)
>Rozwanie problemu ogolnego po przez podzielnie go na podproblemy, ktore sa nastepnie dzielone na
jeszcze mniejsze podproblemy az do rozwiazan oczywistych, latwych do zapisania

KLASY ZAPISUJEMY W OSOBNYCH PLIKACH!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

*.h - plik naglowkowy to jakby spis tresci dla klasy zawiera wszystkie metody z klasa. Sluzy to do 
łatwiejszego znajdowania danej metody w klasie(atrybuty + nagłowki metod)

*.cpp - plik z calymi metodami. Zawieraja one naglowki i ciala metod

----Przyklad----
car

--PLIK .h z NAGLOWKIEM KLASY--
car.h - łatwo znajde jakie posiada metody ale nie znajde jak doklanie dzialaja. Komenatarze w takim
pliku pomagaja zrozumiec za co odpowiedzialne sa metody bez zbednego przeszukiwania caly cial metod

NIE DOZWOLONE INICJALIZACJA ZMIENNEJ W KLASIE(spisie tresci), MOZNA TO ZROBIC DOPIERO W METODZIE --> konstruktor

--PLIK .cpp Z KLASA--
car.cpp - bedac w pliku car.h znajde iz isniteje metoda np wypisz smaochod a w car.cpp moge zobaczyc
jak jest skonstruwana ta metoda

#include "question.h" // dodajemy plik z naglowkami do naszego
                      //pliku cpp. " " oznacza szukaj w naszym folderze
                      //<> szukaj w instalatorze

void Question::load()
{

} // chodzi mi o metode bedaca czescia klasy pytanie robimy tak gdyz jezeli bylo by samo load() 
to jesli by istniala by dziekolwiek taka funkcja to porgram nie wiedzial by czy chodzi o mteode 
czy funkcje

:: <-- operator zasiegu jesli bylo by w jendym pliku cialo i naglowek to nie potrzebny byl by 
operator zasiegu

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

// Quiz w konsoli napisany obiektowo
main.cpp - głowna czesc
questio.cpp - zawiera metody 
question.h - zawiera klase i naglowki metod
-------------------------------------------------------------------------------------------------
Kurs 3. 
-------------------------------------------------------------------------------------------------
klauzule: (dostep do danych)
-private - taki skladnik jest dostpepny tylko dla funkcji skladowych klasy
-protected - dostepny tak jak skladnik private ale dodatkowo jest jeszcze dostepny dla klas 
wywodzacych sie z danej klasy

-public - skladni dostpeny bez ograniczen. Zwykle sa to wybrane meotdy skladowe za pomoca ktorych
dokonuje sie z zewnatrz operacji na danych prywatnych

Jesli nie podamy dostepu do danych to dostep bedzie domyslnie prywatny

--Konstrukotr--
Konstruktor - specjalna metoda skladowa klasy, wywolywana podczas tworzenia obiektu tej klasy. 
Zadaniem konstrukotra jest zainicjowanie obiektu, czyli przypisanie atrybutom warosci startowych.

Konstrukotr ma taka sama nazwe jak klasa

Konstrukotr ma taka sama nazwe jak klasa

Dla konstrukotra nie okresla sie zwracanego typu

Konstrukotr jest zawsze wywolywany automatycznie ilekroc powolujemy do zycia nowy obiekt danej klasy

Klasa moze miec wiecej niz jeden konstruktor (przeciazenie nazwy metody)

Konsrukotr moze wywolac inne metody skladowe swojej klasy np. w celu kontroli bledow

Jesli w klasie nie ma zdefiniowanego zadnego konstukotra, to kompilator samodzielnie wygeneruje 
tzw. konstrukotr domniemany(ale nic mu nie przypisze)

Dzieki konstrukotom obiekty sa zainicjowane juz od momentu tworzenia

--Destrukotr--
Destruktor - specjalna metoda, wywolywana tuz przed usunieciem obiektu, majaca za zadanie wykonac
czynnosci skladajace sie na jego "Zniszczenie", inne niz zwolnienie pamieci zajmowanej przez sam
obiekt (dzieje sie to zawsze automatycznie)

Destrukotr ma nazwe identyczna jak nazwa klasy lecz poprzedzona znakiem tylda ~

Destruktor nie moze miec okreslonego typu zwracanego, podobnie jak konstruktor

Destruktor wywolywany jest automatycznie kiedy obiekt klasy jest likiwdowany

Destrukotr nie moze miec zadnych argumentow, stad moze istniej tylko jeden dstruktor wewnatrz klasy

Destruktor moze wywolac inna metode skladowa swojej klasy

jesli w klasie nie ma zdefinowanego przez programiste destrukotra to kompilator sam wygeneruje destruktro
dla klasy

--

hermetyzacja danych(enkapsulacja danych) - ukrywanie pewnych danych skladowych lub metod obietkow danej klasy tk, aby 
byly one dostepne tylko metodom skladowym tej klasy lub funkcjom zaprzyjaznionym

main.cpp - zawiera program do tworzenia wydarzen(zrozumienie konstrukotr i destruktora)

-------------------------------------------------------------------------------------------------
Kurs 4. 
-------------------------------------------------------------------------------------------------
Funkcje zaprzyjaznione

Funkcja zaprzyjazniona z klasa to funkcja ktora mimo iz nie jest skladnikiem klasy ma dostep do 
wszystkich  nawet prywatnych skladniwko klasy.

To nie funkcja twierdzi, ze jest zaprzyjanziona tylko klasa deklaruje ze przyjazni sie z funkcja

Deklarowac przyjaz moze klasa a nie funkcja.

Funkcja zaprzyjazniona nie jest skladnikiem klasy dlatego nie posiada tez. wskaznika this(dlatego
wysylamy do niej obiekty)

Funkcja zaprzyjanziona moze byc przyjacielem wiecej niz jendej klasy, czyli moze miec dostep do 
prywatych skladnikow kliku klas 

Mechanizm przyjazni uzupelnia hemeyzacje, dajac nam swobode dostpeu do prywatnych atrybutow dla wybranych funckji.
Oczywiscie im iwecej przyjaciol tym potem trudniej nzlezc ewentualne bledy w spojnosci danych

Jesli funckja ma miec dostep do skladnikow prywatnych dwoch klas, to mamy do wyboru dwie opcje:
-funckcja jest przyjacielem dwu klas,
-funckja jest skladnikiem jednej, a przjacielem drugiej.

*Klasy tez moga sie przyjaznic

class Animal
{
    friend class B; //(klasa B ma dostep do danych prywatnych klasy A, co nie znaczy ze klasa A ma
    ...             // dostep do danych kalsy B)
}

Przyjazn nie jest przechodnia co oznacza ze 
klasa B jest przyjacielem klasy A
klasa C jest przyjacielem klasy B
To klasa C nie jest przyjacielem klasy A


Program w kursie 4 pokazuje jak dziala funkcja zaprzyjanziona. Na jej podstawie zostal stworzony 
program ktorego celem jest sprawdzenie czy w utowrzonym prostokacie znajduje sie utowrzony punkt
mian.cpp
friends.cpp
friends.h

--------------------------------------------------------------------------------------------------
Kurs 5. 
-------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------
Kurs 6. 
-------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Kurs 7.
-------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------
Kurs 8. 
-------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
Kurs 9. 
-------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------
Kurs 10. 
-------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------
Kurs 11. 
-------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------
_________________________________________________________________________________________________
