_________________________________________________________________________________________________
Obiektowy kurs c++ notatki by Mateusz Krajewski
_________________________________________________________________________________________________
-------------------------------------------------------------------------------------------------
Szablon:
-------------------------------------------------------------------------------------------------

#include <iostream>

using namespace std;

int main() 
{   
    cout << endl;

    cout << " " << endl; 
	
    cout << endl;
    return 0;
}

-------------------------------------------------------------------------------------------------
Słownik:
OOP - Object Oriented Programmin
**********************************
-class - zbior inforamcji czym jest obiekt - jak jest tworzony oraz jakie posiada cechy w programie
(Zbior wszystkich cech obiektu) (KLASA TO WLASNY TYP DANYCH)
-object - dajacy sie wyodrebnic element rzeczywistosci
-Metoda - klasa zawierajaca funckje oddzialuje na reszte programu
**********************************
Klasa to przepis na to jak utworzyc obiekt
Obiekt jest reprezentantem klasy, utworzonym wedlug tego przepisu

program komputerowy - zbior obiektow komunikujacyhc sie pomiedzy soba w celu wykonywania zadan, a
kazdy obiekt stowrzony jest wedlug przepisu podanego w klasie

-------------------------------------------------------------------------------------------------
Wskazowka:
Zalety OOP:
-ponowne uzycie kodow
-łatwa lokalizacja bledu
-lepsze odzworowanie rzeczywistosci w aplikacji
-hermetyzacja danych
-skalowalnosc kodu
-latwy podzial prac
-mechanizmy dziedziczenia i polimorfizmu
-lepsze wykorzystanie pamieci w programie

-------------------------------------------------------------------------------------------------
Kurs 1. Klasa. Obiekty
-------------------------------------------------------------------------------------------------
Klasa to przepis na to jak utworzyc obiekt
Obiekt jest reprezentantem klasy, utworzonym wedlug tego przepisu
Metoda - funkcja w klasie

klasa = cechy(atrybut) + funkcje

funkcja - funkcja poza klasa
metoda - funkcja wewnatrz klasy

Zmienne tworzy sie w klasie dla kazdego obiektu ale metody juz tylko raz dla zaoszczedzenia pamieci

klasy umownie pisze sie z duzej litery

Dostep do zmiennych:
-public - dostep do wnetrza klasy wszystkim funkcjom

class Animal <-- Nazwa klasy z duej litery
{

}; <-- srednik odroznia klase od funkcji

clasa obiekt;
obiekt.wartoscWKlasie - odwolanie sie do cechy w klasie

pierwszy.cpp - dwie klasy (zrozumienie czy m jest kalsa i obiekt i jak ich sotosowac)

-------------------------------------------------------------------------------------------------
Kurs 2. Projekt obiekotwy
-------------------------------------------------------------------------------------------------
Programowanie wstepujace ( od szczegolu do ogolu):
>Rozwiazanie problemu polegajace na przygotowanieu modulow potrzebnych do rozwiazania problemu 
a nastepnie polaczenie ich w jedna palikacj

Programowanie zstepujace ( od ogolu do szczegolu)
>Rozwanie problemu ogolnego po przez podzielnie go na podproblemy, ktore sa nastepnie dzielone na
jeszcze mniejsze podproblemy az do rozwiazan oczywistych, latwych do zapisania

KLASY ZAPISUJEMY W OSOBNYCH PLIKACH!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

*.h - plik naglowkowy to jakby spis tresci dla klasy zawiera wszystkie metody z klasa. Sluzy to do 
łatwiejszego znajdowania danej metody w klasie(atrybuty + nagłowki metod)

*.cpp - plik z calymi metodami. Zawieraja one naglowki i ciala metod

----Przyklad----
car

--PLIK .h z NAGLOWKIEM KLASY--
car.h - łatwo znajde jakie posiada metody ale nie znajde jak doklanie dzialaja. Komenatarze w takim
pliku pomagaja zrozumiec za co odpowiedzialne sa metody bez zbednego przeszukiwania caly cial metod

NIE DOZWOLONE INICJALIZACJA ZMIENNEJ W KLASIE(spisie tresci), MOZNA TO ZROBIC DOPIERO W METODZIE --> konstruktor

--PLIK .cpp Z KLASA--
car.cpp - bedac w pliku car.h znajde iz isniteje metoda np wypisz smaochod a w car.cpp moge zobaczyc
jak jest skonstruwana ta metoda

#include "question.h" // dodajemy plik z naglowkami do naszego
                      //pliku cpp. " " oznacza szukaj w naszym folderze
                      //<> szukaj w instalatorze

void Question::load()
{

} // chodzi mi o metode bedaca czescia klasy pytanie robimy tak gdyz jezeli bylo by samo load() 
to jesli by istniala by dziekolwiek taka funkcja to porgram nie wiedzial by czy chodzi o mteode 
czy funkcje

:: <-- operator zasiegu jesli bylo by w jendym pliku cialo i naglowek to nie potrzebny byl by 
operator zasiegu

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

// Quiz w konsoli napisany obiektowo
main.cpp - głowna czesc
questio.cpp - zawiera metody 
question.h - zawiera klase i naglowki metod
-------------------------------------------------------------------------------------------------
Kurs 3. Konstrukotry, destruktory. Dostep: public, private, protected
-------------------------------------------------------------------------------------------------
klauzule: (dostep do danych)
-private - taki skladnik jest dostpepny tylko dla funkcji skladowych klasy
-protected - dostepny tak jak skladnik private ale dodatkowo jest jeszcze dostepny dla klas 
wywodzacych sie z danej klasy

-public - skladni dostpeny bez ograniczen. Zwykle sa to wybrane meotdy skladowe za pomoca ktorych
dokonuje sie z zewnatrz operacji na danych prywatnych

Jesli nie podamy dostepu do danych to dostep bedzie domyslnie prywatny

--Konstrukotr--
Konstruktor - specjalna metoda skladowa klasy, wywolywana podczas tworzenia obiektu tej klasy. 
Zadaniem konstrukotra jest zainicjowanie obiektu, czyli przypisanie atrybutom warosci startowych.

Konstrukotr ma taka sama nazwe jak klasa

Konstrukotr ma taka sama nazwe jak klasa

Dla konstrukotra nie okresla sie zwracanego typu

Konstrukotr jest zawsze wywolywany automatycznie ilekroc powolujemy do zycia nowy obiekt danej klasy

Klasa moze miec wiecej niz jeden konstruktor (przeciazenie nazwy metody)

Konsrukotr moze wywolac inne metody skladowe swojej klasy np. w celu kontroli bledow

Jesli w klasie nie ma zdefiniowanego zadnego konstukotra, to kompilator samodzielnie wygeneruje 
tzw. konstrukotr domniemany(ale nic mu nie przypisze)

Dzieki konstrukotom obiekty sa zainicjowane juz od momentu tworzenia

--Destrukotr--
Destruktor - specjalna metoda, wywolywana tuz przed usunieciem obiektu, majaca za zadanie wykonac
czynnosci skladajace sie na jego "Zniszczenie", inne niz zwolnienie pamieci zajmowanej przez sam
obiekt (dzieje sie to zawsze automatycznie)

Destrukotr ma nazwe identyczna jak nazwa klasy lecz poprzedzona znakiem tylda ~

Destruktor nie moze miec okreslonego typu zwracanego, podobnie jak konstruktor

Destruktor wywolywany jest automatycznie kiedy obiekt klasy jest likiwdowany

Destrukotr nie moze miec zadnych argumentow, stad moze istniej tylko jeden dstruktor wewnatrz klasy

Destruktor moze wywolac inna metode skladowa swojej klasy

jesli w klasie nie ma zdefinowanego przez programiste destrukotra to kompilator sam wygeneruje destruktro
dla klasy

--

hermetyzacja danych(enkapsulacja danych) - ukrywanie pewnych danych skladowych lub metod obietkow danej klasy tk, aby 
byly one dostepne tylko metodom skladowym tej klasy lub funkcjom zaprzyjaznionym

main.cpp - zawiera program do tworzenia wydarzen(zrozumienie konstrukotr i destruktora)

-------------------------------------------------------------------------------------------------
Kurs 4. Funkcje zaprzyjaznione
-------------------------------------------------------------------------------------------------
Funkcje zaprzyjaznione

Funkcja zaprzyjazniona z klasa to funkcja ktora mimo iz nie jest skladnikiem klasy ma dostep do 
wszystkich  nawet prywatnych skladniwko klasy.

To nie funkcja twierdzi, ze jest zaprzyjanziona tylko klasa deklaruje ze przyjazni sie z funkcja

Deklarowac przyjaz moze klasa a nie funkcja.

Funkcja zaprzyjazniona nie jest skladnikiem klasy dlatego nie posiada tez. wskaznika this(dlatego
wysylamy do niej obiekty)

Funkcja zaprzyjanziona moze byc przyjacielem wiecej niz jendej klasy, czyli moze miec dostep do 
prywatych skladnikow kliku klas 

Mechanizm przyjazni uzupelnia hemeyzacje, dajac nam swobode dostpeu do prywatnych atrybutow dla wybranych funckji.
Oczywiscie im iwecej przyjaciol tym potem trudniej nzlezc ewentualne bledy w spojnosci danych

Jesli funckja ma miec dostep do skladnikow prywatnych dwoch klas, to mamy do wyboru dwie opcje:
-funckcja jest przyjacielem dwu klas,
-funckja jest skladnikiem jednej, a przjacielem drugiej.

*Klasy tez moga sie przyjaznic

class Animal
{
    friend class B; //(klasa B ma dostep do danych prywatnych klasy A, co nie znaczy ze klasa A ma
    ...             // dostep do danych kalsy B)
}

Przyjazn nie jest przechodnia co oznacza ze 
klasa B jest przyjacielem klasy A
klasa C jest przyjacielem klasy B
To klasa C nie jest przyjacielem klasy A


Program w kursie 4 pokazuje jak dziala funkcja zaprzyjanziona. Na jej podstawie zostal stworzony 
program ktorego celem jest sprawdzenie czy w utowrzonym prostokacie znajduje sie utowrzony punkt
mian.cpp
friends.cpp
friends.h

--------------------------------------------------------------------------------------------------
Kurs 5. Kurs 5. Dziedziczenie. Klasy pochodne
-------------------------------------------------------------------------------------------------
Dziedziczenie(inheritance) jest mechanizmem wspoldzielenia funckjonalosci pomiedzy klasami. Klasa moze dziedziczyc
po innej klasie, co oznacza ze oprocz swoich wlasnych atrybutow oraz zachowan, uzyskuje takze te 
pochodzace z klasy z ktorej dziedziczy.

Dziedziczenie to przede wszystkim forma ponownego uzywania kodu, w ktorej nowa klasa tworzona jest na
podstawie juz isnitejacej klasy, pobietajac jej atrybuty i zachowania, a takze dodajac nowe skladniki
ktorych nowa klasa wymaga

Poniewaz nowe klasy sa dziedziczone z isnitejacyhc juz klas, to umozliwai to budowanie programow ze 
zgromadzonych komponentow wielkorotnego uzytku. Oszczedzamy swoj czas

Potomoek - klasa ktora dziedziczy wlasnosci z innej klasy

Klasa podstawowa - klasa ktora jest rodziciem potomka

Kazda klasa pochodna moze stac sie w przyszlosci klasa podstawowa zatem mozliwe jest dziedziczenie
wielopokoleniowe
 
Jesli klasa tworzona jest na podstawie jednej klasy podstawowej, to nazywamy to dziedziczeniem jendokrotnym

Jesli klasa tworzona jest na podstawie wiecej niz jednej klasy podstawowej, to nazywamy to dziedziczeniem wielokrotnym

Nowe klasy powstaja z juz istniejacych klas zgromadzonych w bilbiotekach. Umozliwia to budowanie programow 
z komponentow wielkorotnego uzytku.

--
Jezeli skladnik ma te sama nazwe w klasie podstawoej i pochodnej, to nastapi zasloniecie nazwy,
tj. skladnik z klasy pochodnej zasloni ten z klasy podstawowej

Skaldniki ktore odziedziczylismy z klasy podstawej domyslnie pozsotaja zasloniete, jezeli w klasie pochodne 
jest ksladnik o tej smaej nazwie

Przyklas
zamiast np. x=1; Rodzic::x=1;

>Skaldniki prywatne klasy podstaowej zostana odziedziczone, ale w zakresie klasy pochodnej nie ma do nich 
bezposredniego dostepu.

>Skladniki chronione i publiczne sa bezposrednio dostepne w zakresie klasy pochodnej. Slowo portected 
znaczy, iz skladniki dla wszytkich potmokow danej klasy bedze dostep tak, jakby byl public, natomiast 
dla calej reszty bedzie niedostepny, czyli tak, jakby byl private.

Rodzaje dziedziczenia
> dziedziczenie publiczne (public) BEZ ZMIAN

> dziedziczenie chronione (protected) - w tej opcji skladniki public oraz protected sa w klasie 
pochodnej od teraz zabezpieczone jako protected

> dziedziczenie prwatne (private) - skaldniki public oraz protected sa w klasie pochodnej od teraz zabezpieczone
klauzula private

-- Zapis dziedziczenia --

class Prostokat:public Punkt - klasa Prostokat dziedzczy publicznie po klasie Punkt(:public Punkt - lista pochodzenia)

-- Czego nie dziedziczy klasa pochodna -- 
Nie mozemy odziedziczyc:
>konstrukotra
>destrukotra
>operatoa przypisania


Framework(struktura) - w programowaniu jest szkieletem do budowy aplikacji. Definiuje on strukture 
aplikacji oraz ogolny mechanizm jej dzialania, a takze dostarcza zestaw komponentow i biliotek ogolnego
przeznaczenia do wykonywania okreslonych zadan


-- Program --
Tworzymy punkt i tworzymy kola. Sprawdzmy czy punkt znajduje sie w kole na zasadzie dziedziczenia
wlasnosci rodzica

--------------------------------------------------------------------------------------------------
Kurs 6. Funkcje wirtualne. Polimorfiz
-------------------------------------------------------------------------------------------------
Polimorfizm - mechanizm dajacy programiscie mozliwosc wyabstrahowania podejmowanych przez metody 
dzialan od konkretnych typow danych

Wiaze sie z zastosowaniem polimorficznego wskaznika doa bstrakcyjnej klasy podstawowej

wskaznik -> rysuj(); - funkcja wirtulana uzywa strzalki

>klasa abstrakcyjna to klasa podstawowa. Nie realizujemy tej klasy, on dostarcza nam mozliwosc
zrobienia polimoricznego wskaznika

>klase konkretne - Sa to klasy na ktorych bedziemy tworzyc obiekty

metoda wirtualna - bedzie zawsze zaslonieta przez metody w klasach konkretnych. Dodawy jest przedrostek
o nazwie virtual (ta metoda nigdy sie nie wykona)

virtual void rysuj();

*mozna ale nie trzeba dodac slowko virtual w klasach konkretnych

metoda wirtualna sie nie wykona wiec zapisujemy ja tak

virtual void rysuj() = 0; - mowi sie o takiej funkcji ze jest to tak zwana CZYSTA FUNKCJA WIRTUALNA

-- Rodzaje wiazan --

>Wiazanie statyczne:
Kolo k;
k.rysuj();

k zawsze zostanie typu Kolo

>Wiazanie dynamiczne
Ksztalt *wsk;
wsk = &k; - wsk moze sie zmieniac np na kolo trojkat kwadrat
wsk -> rysuj();

Polimorfiz pozwala zaprojektowac i wdrazyc program ktory jest latwo rozszerzalny

W czasie kompilacji nie musi byc znany typ obiektu dla wywolan funckji wirtulanych. W trakcie wykonywania 
pogramu wywolanie funckji wirtualnej jest dopasowywane do odpowiedniej fukcji sklawoej wywolywanego obiektu

Taka sytuacja nazywana jest wiazaniem dynamicznym(poznym wiazaniem)

Oprogramowanie dzialajace z dostarczonymi wczesniej klasami powinno wspolpracowac z nowymi klasami
pochodnymi poprzez zasepowanie funkcji wirtulanych przez metody z nowych klas(latwa rozszerzalonsc)

Mozemy tworzyc uniwersalne metody z wiazaniem dynamicznym, przetwarzajace obietky wszystkich klas pochodnych
od abstrakcyjnej klasy podstawowej


main.cpp - Program ilustrujacy dzialanie funckji wirtualnych

---------------------------------------------------------------------------------------------------
Kurs 7. Instalacja builder. Aplikacja okienkowa
-------------------------------------------------------------------------------------------------
Instalacja Builder na windows

hello world

---------------------------------------------------------------------------------------------------
Kurs 8. Budowa wlasnego notatnika
-------------------------------------------------------------------------------------------------
Builder c++
Gorace litery - Skorty do menu  np alt+P zaznaczy nam plik. Wystaczy dodac & przed nazwa 
- mysnik wstawia separator w menu

--Memo--

lines > ... > usuwamy wartosc wpisana na stalo w "memo"

Align (ulozenie) alClient - uzyje cala przestrzec klient

--Open--
Filter > ... > (dodajemy tu filtry)

--
Obsluga wyjatkow 
try - sprobouj

catch (...) - zlap (...) wszystkie wyjatki

wlasne okienka dialogowe
(Application->MessageBox("Czy na pewno zakonczyc program?", "Potwierdz", MB_YESNO | MB_ICONQUESTION) == IDYES) 
- oznacza ze wyswietli przycik yes no i jesli wybor jest yes to ma cos wykonac co zdefiniujemy
--Save--
Czy nadapisac plik trzeba:
Options > ofOverwritePromt - potwierdzenie czy chcemy nadpisac plik

--
Obsluga skrotow klawiszowych:
memo > Events > onKeyDown

if (Shift.Contains(ssCtrl)) - sprawdza czy zostal przytrzymany klawisz ctrl
{}

--
OBsluga zamkniecia skrotem klawiszowym albo nacisniecie krzyzyka 
Form1 > Events > OnClose

Action=caNone; - nie podejmuj zadnej akcji

--
Wycinanie
tres -> CutToClipboard(); - wytnij do schowka
tres -> CopyToClipboard(); - kopiuj do schowka
tres -> PasteFromClipboard(); - wklej z schowka

--
Zaznaczanie w trybie okienkowym:
properties > Checked > true - ustawiamy domyslnie ze jest wlaczony

Pasek przeijania:
memo > proprties > SrcollBars > (ssNone - zaden nie jest aktywy) (ssVertical - pionowy) (ssHorizontal - poziomy) 
(ssBoth - obydwa)

Zawijanie wierszy:
memo > properties > WordWrap

Dodawanie obrazka:
Propertis > Picture > ... > load
Properties > AutoSize > True - automatyczne dostosowanie obeazka
-- 
Aby obsluzyc drugie okno w pierwszym nalezy dolaczyc go #include "Unit2.h"

Pokazanie modalne - nie mozna przejsc do programu poki nie zamkniemy wczesniej wyswietlonego okna

Zapobieganie powiekszenia okna:
Form2 > Propeties > BorderIcons > biMaximize > false

Zapobieganie zmiany rozmiaru okna:
Form2 > Properties > BorderStyle > bsToolWin

Przelaczanie na strone interentowa
        ShellExecute(NULL,"open","http://miroslawzelent.pl", NULL, NULL, SW_SHOWNORMAL); - uruchomienie z powloki, 
	parametr null, adres, null, null , pokazanie bez udziwnien.

---------------------------------------------------------------------------------------------------
Kurs 9. Gra kolko krzyzyk
-------------------------------------------------------------------------------------------------
najechanie myszka na obrazek i zmiana kursora myszki
img > Properteis > cursor >crHandPoin

Form1 > Events > OnCreate - podczas tworzenia form1 

pole1 -> Enabled = false; - wylacza pole (nie mozna kliknac)

char * wsk; - typ lancuchow z jezyka c

---------------------------------------------------------------------------------------------------
Kurs 10. Timer. Gra Arkanoid
-------------------------------------------------------------------------------------------------
Dodanie tła 
shape > properties > Brush > color

Transparentnosc
transparet > true - usuwa wszystkie piksele ktore sa dokladnie takie same jak piksel obrazak o wspolrzednych (0,0)

Wcisniete klawisze:
Form1 > OnKeyDown - Key == VK_LEFT jest to zmienna mowiaca ze jest wcisnieta lewa strzalka

Puszczenie klawisza:
Tak samo jak wyzej tyle ze OnKeyUp

Znikajace tekstury:
Form1 > Properties > UseDockMEnager > true | DockSite > true

if kolizja(b, Image1) - z automatu jest tutaj true wiec nie trzeba przyrownywac

--------------------------------------------------------------------------------------------------
Kurs 11. Dzwieki w programie. Gra memorki
-------------------------------------------------------------------------------------------------
sndPlaySound("snd/dzwiek.wav", SND_ASYNC); - ustawienie odtwarzania asynchronicznego dzwieku

randomize(); - generator liczb pseudolosowych(w strukturalnym c++ srand(time(NULL)); )

liczby[i] = random(5)+1; - bedziemy mieli w tablicy 1000-elementowej liczby z zakresu od 1 do 5 innaczej by bylo od 0 do 4



-------------------------------------------------------------------------------------------------
_________________________________________________________________________________________________
