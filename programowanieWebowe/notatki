_________________________________________________________________________________________________
Programowanie Webowe - notatki by Mateusz Krajewski
_________________________________________________________________________________________________
-------------------------------------------------------------------------------------------------
Słownik
-------------------------------------------------------------------------------------------------
<!DOCTYPE html> - typ dokumentu. W jakim standardzie zakodowana jest strona (HTML5)
<html lang="pl"> - znacnzik html (strona w jezyku polski)
<head> - glowa, tu sa zawarte wszystkie informacje o naszej stronie
<body> - cialo, tu jest zawarta nasza strona, to co jest zapisane to bedzie wyswietlane
<meta> - okresla cos wiecej. Wykracza poza niezbednoscia do stworzenia strony
<title> - tytul strony, bedzie sie wyswietlac w wyszukiwarce
<link> - polaczenie np do zewnetrznego pliku(np css)
<script> - znacznik skryptu

ROZWINIECIE ZNACZNIKOW KURS 3(patrz nizej)

Słowka klucze:
description - opis strony
keywords - slowa klucze
stylesheet - arkusz ze stylami

CSS:
Oznaczenia:
body <- oznacza kolorowanie znacznika
.body <- oznacza klase
#body <- oznacza identyfikator 

Nazewnictwo w css:
selector
{
    property: value;
}

-------------------------------------------------------------------------------------------------
Kurs 0 - Mapa Mysli
-------------------------------------------------------------------------------------------------
>Kurs c++
>Wybord edytora
>Git, GitHub
>6 Bledow w nauce programowania
>Obecnosc na forach dyskusyjnych
>Umiejetnosci miekkie
>Jezyk angielski
>Informatyka
>Praca w terminalu
>Metody skutecznej nauki
/\
Umiejetnosci fundamentalne
/\
<PROGRAMOWANIE WEBOWE>
\/
>Front-end > HTML > HTML5
|          > Css > CSS3 > RWD > Foundation
|          |            |     > Bootstrap               
|          |            |
|          |            > Prekompilatory > LESS
|          |                             > SASS
|          |                             > Stylus
|          |
|          |
|          >JavaScript > Zaawansowany JS > AJAX + JSON
|          |           |                 > ECMAScript
|          |           |                 > Build tools
|          |           |                 > Frameworki JS > React.js
|          |           |                 |               > Angular.js
|          |           |                 |               > Ember.js
|          |           |                 |
|          |           |                 > Testy > Mocha
|          |           |                         > Jasmine
|          |           |                         > Karma
|          |           > jQuery
|          |
|          >CMS(Content Managment System - system zarzadzania trescia) > WordPress
|                                                                      > Joomia! 
|                                                                      > PrestaShop
|                                                                      > Drupal  
|
>Back-end > Php > Zaawansowany PHP > Symforany
          |                        > Laravel
          |                        > Zend
          |
          > Python > Django
          |
          > Ruby > RubyOnRails
          |      > Sinatra
          |
          > Node.js (srodowisko uruchomieniowe JS) > Hapi.js
          |                                        > Socket.io
          |                                        > Express.js
          > My SQL > PostgreSQL > MongoDB
          |                     > Cassandra
          |                     > Doctrine2.0
          |
          > Enterprise > Java > Spring
                       |      > Grails        
                       |
                       > C# > .NET
                       |
                       > Haskell

-------------------------------------------------------------------------------------------------
Kurs 0 - Technologie webowe (teoria)
-------------------------------------------------------------------------------------------------
<>Taksonomia celow nauczania blooma:
1.Wiedza
2.Zrozumienie
3.Zastosowanie
4.Analiza
5.Synteza
6.Ocenianie

<>Technologie Webowe
>Front-end (kod jazwny)
-Kody zrodlowe uruchamianie lokalnie(po stronie klienta)
-HTML - jest jezykiem opisowaym(sklada sie ze znaczikow) mowi co gdzie sie znajduje
-CSS - opisuje styl wygladu znacznikow
-JavaScript - Pelnoprawny jezyk programowani ktory zapewnia dodatkowe mozliwosci interfejowi
wityny internetwej. Z uzyciem JS mozna zmienic kod HTML i CSS stron juz po zaladowaniu sie
witryny do przegladarki, bez potrzeby kontaktu z serwerem

>Back-end (kod niejawny)
-Kod zrodlowy wykonywany na serwerze
-PHP - obsluguje mechanike np. logowanie ktore pliki te sa zapisane na serwerze
-MySQL - Mechanizm skladowania danych

*IDE(edytor)
*mapa mysli(patrz wyzej)

-------------------------------------------------------------------------------------------------
Kurs 1 - Templatka Witryny
-------------------------------------------------------------------------------------------------
index.html - podstawowa nazwa, jesli strona ma byc wyswietlona to szuka tego pliku

<!DOCTYPE html> - typ dokumentu. W jakim standardzie zakodowana jest strona (HTML5)
XHTML = HTML 4 + XML
<html lang = "pl"> - !znacznik! html (rama), zapis lang jezyk

</html>

<head> - kodowanie znakow jezyk (np.polski) tytul i opis w wyszukiwarce. Skrytpty JS, arkusze 
stylow CSS, czcionka Googla

<body> - wszystko co wyswietla strona. tekst, obrazy, hiperlacza, pola edycyjne, przyciski, 
listy wyboru, checkboxy

<meta charset ="UTF-8"> - Zestaw uzywanych znakow(polskie znaki)

<title> - tytul strony

<meta name"description" content="opis tutaj zawarty bedzie wyswietlany w wyszukiwarce pod adresem
strony. Zawiera opis o czym jest nasza strona">

<meta name="keywords" content="umieszczamy tutaj slowa klucze, przy ktorych google ma wypozycjonowac
nasza strone(np strona ze zdrowym jedzeniem uzyje fit, zdrowie, zdrowie jedzenie). JEDNAK ALGORYTM
GOOGLA NIE ZWRACA NA TO UWAGI. Wstawia sie to poniewaz mozna wiec czemu nie wpisac kilka slow

<meta name="author" > - Tutaj wpisuje sie autora | Jest to opcjonalne, lepiej podpisac sie 
hiperlaczem do nasze strony

<meta http-equiv="X-Ua-Compatible" content="IE=edge, chrome=1"> - sotsuje sie ten opis aby 
uzytkownicy korzystajacy z przegladarki internet explor mogli poprawnie wyswietlac strone, edge 
oznacza uzyj najnoweszej wersji IE,chrome =1 - oznacza ze jesli kto uzywa dodatku do IE o nazwie 
chrome 

<link rel="stylesheet" href="main.css"> - podpinanie zewnetrzengo pliku css. Jesli znajduje sie 
w jakims folderze to trzeba podac sciezke, a jesli wyzej niz nasz index.hmtl to  wtedy piszemy
../main.css (../ <- ozacza przejscie wyzej)

rel="stylesheet" - oznacza arkusz ze stylami

CSS:
body <- oznacza kolorowanie znacznika
.body <- oznacza klase
#body <- oznacza identyfikator

background <- tlo
background-color <- uszczegolowienie, czyli chodzi tutaj o kolor tylko

*
znacznik- (tag) <html>
atrybut - href <- href to atrybut. Przyklad: <a href="www.facebook.pl">
Wiekszosc skryptow umieszcz sie na samym koncu </body>, aby wczytanie strony nastepowalo szybciej 
niz jezeli mialo by czekac na wczytanie skryptu a poznie jstrony

Kodowanie w programie musi byc takie samo jak kodowanie powstajacej strony

-------------------------------------------------------------------------------------------------
Kurs 2 - Struktura blokowa
-------------------------------------------------------------------------------------------------
url() - sciezka do pliku
background-image: url(img/escheresque_ste.png); - podpinanie obrazu jak tlo

!Obraz tla orientujemy wzgledem polozenia arkusza stylow css a nie wzgledem pliku html 
(CSS -> PNG ../img/obrazek.png)

!Warto sie pilnowac gdzie zapisujemy nasze pliki aby sciezki sie zgadzaly podczas podpinania 
naszych arkuszów

>Znaczniki strukturalne:
Opisuja logiczna strukture witryny, sluza najczesciej do zgrupowania tresci(rozmieszczania ich na 
plotnie przegladarki)

Podstawowy znacznik strukturalny = div (divide, podzial stony)
    <div> </div> - elementy blokowe domyslnie ustawiaja sie jeden po drugim

>Tworzenie struktury witryny
Nie tworzymy strony na tabelach bo:
1. Niepelne rodzielenie zawartosci witryny od opisu jej wygladu
2. Komorka tabeli nie jest autonomicznym elementem takim jak blok div
3. Tag <table> nie zostal pomyslany jako znacznik strukturlany
4. Powstanie nadmiarowego kodu opisujacego strukture strony internetowej
5. Wolniejsze ladowanie i renderwoanie zawartosci strony internetowej
6. Tabele nie sa SEO friendly
7. Problem z obsługa responsywnosci strony

>Nowe znaczniki HTML5
<header></header>
<article></article>
<footer></footer>
<nav></nav>
<section></section>
<aside></aside>

>Aby <div> ulozyc obok siebie nalezy uzyc dwoch roznych rozwiazan:
----float: left; - ukladanie blokow do lewej, nalezy zazanczyc iz kazdy bloko ktory ma byc 
                    wyrownany do lewej powinien zawierac ten zapis (float: left) | Jednoczesnie
                    powrot do normlanego rozmieszczania blokow odbywa sie po przez dodanie linijki
                    (clear: both;)
                    *Jesli nie potrzebujemy np. stopki to tworzymy pusty div i dajemy mu 
                    clear: both;
                    *ZAWSZE CZYSCIMY OPLYWANIE (float: left) przez (clear: both)*


----display:inline-block; - Zostaja wstawione odstepy przez znaki biale miedzy <div> (spacje, tabluatory)
                            Mozna rozwiazac to:
                            -Ustawianie wymiarow tak aby sie zmiescily
                            -Usuniecie odstepy (<div></div><div></div>)
                            -Ustawienie minusowego marginesu
                            -Ustawienie font-size: 0;

<div style="clear:both"></div> <- Tak zwany in line css(styl w srodku lini tworzace plik html)
Jesli potrzebujemy wiecej takich gumek, to mozemy stworzyc klase o nazwie .eraser i tam zapisac 
czysczenie. Dzieki temu zabiegu mozemy uzywac tej klasy gdzie tylko chcemy bez ustawiania stylu 
in line

Roznice:
Jesli potrzebujemy blokow ktore beda obok siebie i zajma caly kontener to lepiej uzyc float: left
jesli potrzebujemy np. dwa przyciski na samym sordku to lepiej display uzyc. W display mozna uzyc
text-align: center; a w float wszystko przyklei sie do lewej.

!Nie mozna nazywac klas w CSS samymi liczbami!

-------------------------------------------------------------------------------------------------
Kurs 3 - Znaczniki HTML
-------------------------------------------------------------------------------------------------
BUDOWA ZNACZNIKOW
1. Zacznik pojedynczy
<znacznik atrybut="wartosc">
2. Znacznik podwojny
<znacznik>                                  </znacnzik>
^znacznik otwierajacy moze miec atrybut      ^znacznik zamykajacy nie ma atrybutow

ZNACZNIKI:
1. <a></a>
    (ang. anchor - kotwica) Znacznik definiujacy link, chyba ze nie podano atrybutu href(wowczas 
        trudno mowic o istnieniu hieprlacza bo brakuje adresu URL, pod ktory klikniecie w link ma nas 
        zaprowadzic)

    Atrybuty:
    href - Hypertext Reference, czyli odniesienie hipertekstowe(nie wymagany w znaczniku)
    target - gdzie docelowo ma trafic podlinkowany adres(nie wymagany w naczniku)
        _self - otworz w tej samej karcie, w ktorej znajduje sie link(automatycznie jest zapisane 
                wiec nie trzeba uzywac)
        _blank - otworz w nowej, nieuzywanej karcie przegladarki(uzywamy wtedy kiedy sadziy ze 
                powinno otworzyc sie w nowej karcie)
        _parent - zwiazane z ramkami
        _top - zwiazane z ramkami


    Przyklad:
    <a href="http://pasja-informatyki.pl" target="_self">Pasja infromatyki</a>

2. <img>
    (ang. image - obrazek) znacznik wstawiajacy na strone plik graficzny

    Atrybuty:
    src - zrodlo(wymagany)
    alt - alternative information, alternatywny tekst opisujacy zawartosc obrazu, pokazywany przez
            przegladarke w sytuacji niemozliwosci zaladowania widoku zrodlowej grafiki(wymagany)
    width - szerokosc obrazu \
    height - wysokosc obrazu / Lepiej to zrobic w arkuszu css(nie wymagane)


    Przyklad:
    <img src="logo.jpg" alt="Nike">

3. <p></p>
    (ang. paragraph - paragraf, akapit) logicznie spojny fragment np. tekstu, ułatwiający 
        interpretowanie struktury dokumentu. Np. tworzy akapity zamiast zlanego tekstu


    Przyklad:
    <a> Akapit jakiegos tekstu </a>

    *<br> - zlamanie lini
     <br><br> - alternatywa uzywania paragrafu(slaby zapis)

4. <h1></h1> ... <h6></h6>
    (ang. heading - naglowek) tekst poprzedzajacy rozpoczecie kolejnej sekcji w dokumencie, zazwyczaj
        zapisany wieksza czcionka anizeli wlasciwa jej tresc

    <h1></h1> - Najwiekszy naglowek
    <h2></h2> - Mniejszy niz h1
    ...
    <h6></h6> - Najmniejszy naglowek z mozliwych

5. Listy:
    <ul></ul> - (unordered list) Nie numerowana lista. Np zawiera kropki itp.
    <ol></ol> - (ordered list) Numerowana lista. Np zawiera 1,2,3,4.

    <li></li> - (list item) Elementy listy. 


    Przyklad:
    <ul>
        <li> Pierwszy przypadek</li>
        <li> Drugi przypadek</li>
    </ul>


    Zagniezdzone listy - lista w liscie
    
    Przyklad:
    <ul>
        <li> Pierwszy przypadek
            <ol>
                <li>Pies</li>
                <li>Kot</li>
            </ol>
        </li>
        <li> Drugi przypadek</li>
    </ul>

6. <table></table>
    (ang. table - table) przedstawienie danych w czytelnej, dwuwymiarowej postaci(nie uzywamy do
        tworzenia calych stron)

    <tr></tr> - (table row) wiersz tabeli
    <td></td> - (table drawe) komorka tabeli

    Scalanie wierszy:
    rownspan - scalanie wierszy
    colspan - scalanie komorek

    Urozmaicenie:
    <thead> - (table head) tabela glowy \
    <tbody> - (table body) cialo tabeli  > Ulatwia to przekazanie jakiejs inforamcji w tabeli
    <th> - komorka naglowkowa           /

    Istnieje mozliwosc pominiecia zamykajacych tagow uzywajac <thead><tbody><th><td>


    Przyklad:
    <table>
        <tr>
            <td>1</td><td>2</td>
        </tr>
        <tr>
            <td>3</td><td>4</td>
        </tr>
    </table
    
    -------
    |1 | 2|
    -------
    |3 | 4|
    -------
    
    Przyklad 2:(scalenie wierszy)
    <table>
        <tr>
            <td colspan="2">1</td>
        </tr>
        <tr>
            <td>3</td><td>4</td>
        </tr>
    </table
    
    -------
    |1    |
    -------
    |3 | 4|
    -------

    Przyklad 3:(scalanie komorek)
    <table>
        <tr>
            <td rowspan="2">1</td><td>2</td>
        </tr>
        <tr>
            <td>3</td>
        </tr>
    </table>
    
    -------
    |  | 2|
    |1 |--- (tablea 1 zawiera dwie komorki wiec naturalne ze 3 ustawi sie obok bo juz sie nie miesci)
    |  | 3|
    -------

7. <span></span>
    (ang. span - zasieg) pojemnik, ktory domyslnie nie zachowuje sie blokowo, najczesciej uzywany 
    do "aplikowania" stylu CSS na swojej wewnetrznej zawartosci

    Pojemnik span mzoe zachowywac sie blokowo, jezeli w CSS dopiszemy (display: block;)


    Przyklad:
    To jest kolor <span class="red">asd</span>i tyle. 
    (w klasie red nadajemy styl np. kolor czerwony i zmienia to na stronie kolor slowa asd *dawnniej
    zamiast span bylo font*)

8. <form></form>
    (ang. form - formularz) obszar na stronie internetowej, zawierajacy roznorodne elementy
        interfejsu, sluzace do komunikacji/wymiany danych z uzytkownikiem witryny

    Atrybuty:
    action - jaki plik zajmie sie przetwarzanie danych tych z formularza
    method - metoda przetwarzania formularza (get lub post) jesli brak to mtoda get


    Przyklad:
    <form action="login.php" method="post">
    **Tutaj sa kotrolki odpowiadajace za wpisanie do formularza daych**
    </form>

    Tagi w <form>:
    <label></label> - etykieta(slowny opis)   
                    id - identyfikator odwoluje sie do for w label
                    for - dla idnetyfikator

                    Przyklad:
                    <label>Podaj login: <input type="text"></label>
                    lub
                    <label for="pole">Podaj login:</label>
                    <input type="text" id="pole">

    <input> - wejscie(dane wejsciowe)


        Przyklad:
         <input type="text" id="pole" placeholder="nick"> 
            
            placeholder - wyswietlenie wewnatrz pola(podpowiedz)
            
            type - typ wprowadzonego pola
                
                >text - wprowadzi tekst
                
                >password - bedzie wyswietlac kropki zamiast liter(maskuje)
                
                >number - wprowadzanie liczb (nie da sie wprowadzic liter *liera e - zapis naukowy*)
                
                >checkbox - kontrolki do zaznaczania(np. Akceptacja regulaminu)
                    checked="checked" - atrybut oznacza ze automatycznie checkbox jest zaznaczony
                    Zaznaczenie jednego checkboxa nie odznacza drugiego.


                        Przyklad:
                        <form action="login.php" methon="post">

                            <input type="checkbox" id="yes" checked="checked">
                            <label for="yes">Akceptuje regulamin</label>
                        </form>

                >radio - zaznaczenie jednego pola odznacza drugie. Aby wiedzialy pola wzajemnie 
                o sobie musza posiadac tego samego name.
                

                    Przyklad:
                     <label><input tpye="radio" name="plec" value="m">mezczyzna</label>
                     <label><input tpye="radio" name="plec" value="k">kobieta</label>

                >submit - przycisk. wyslanie formularza


                    Przyklad:
                        <input type="submit" value="kliknij">

                >button - zwykly przycisk


                    Przyklad:
                        <input type="button" value="kliknij">
    

    <button></button> - Dzieki temu mozemy umiescic obrazk w przysicku(alternatywa dla input="bUtton")
                
    <select></select> - Lista wyboru, wybieramy z listy dany element.
                        *Aby byla juz wybrana ktoras opcja nalezy w danej opcji wpisac (selected)
                        *Dopisanie do znacznika (multiple) ukazuje nam liste nie rozwijana
                        (od razu jest cala wyswietlona lista)


                        Przyklad:
                        <label for="imie">Wybierz postac</label>
                        <select id="imie">
                            <option value="m">Mario</option>
                            <option value="l">Luigi</option>
                        </select>


                        > <optgroup></optgropu> - zgrupowanie opcji na liscie
                    

                        Przyklad:
                        <label for="imie">Wybierz postac</label>
                        <select id="imie">
                            <optgroup label="Hydraulicy">
                                <option value="m">Mario</option>
                                <option value="l">Luigi</option>
                            </optgroup>
                        </select>



            
    <textarea></textarea> - wpisujemy jakis tekst(duzy tekst np komentarz)
            rows - wiersze 
            cols  - ilosc znakow(zalezy od czcionki)


            Przyklad:
            <textarea id="comment" rows="5" cols="44"></textarea>

    <output> - wyjscie

9. <strong></strong>
    (ang. strong - silny) sposob wyroznienia w dokumencie tekstu: waznego, ostrzegawczego,
        pomagajacego sledzic tok wydarzen w zapisanej wypowedzi. (Wytluszcza czcionke)

        Uzywamy gdy:
        1. Jest wazny
        2. Ostrzega 
        3. Uzytkownik powinien wzrokowo na nie spojrzec

10. <em></em>
    (ang. emphasis - emfaza, nacisk) znacznik oddajacy zabieg emfazy w tekscie(pochylony tekst).
        Nacisk na slowo

11. <small></small>
    (ang. small - maly, drobny) znacznik do przypisow, komentarzy, podpowiedzi, zapisow pobocznych
        majacych charakter kuluarowy

12. <sup></sup>  <sub></sub>
    (ang. superscript/subscript) znacznik indeksu gornego/dolnego

13. <blockquote></blockquote>
    (ang. blockquote - blok z cytatami) znacznik do cytowania wypowiedzi(dodaje wciecia).


    Przyklad:
    <blockquote cite="https://pl.wikipedia.pl">
        <p>Cytat autora</p>
        <footer>
        - <a href="https://pl.wikipedia.pl">
            Jacek Piekara </a>
        
        </footer>
    </blockquote>

    Dzieki dodanie footera dodajemy odsylacz do cytatu innaczej uzytkownik musial by zbadac tekst
    aby przejsc do strony z cytatem

14. <q></q>
    (ang. quote - cytat) znacznik cytowania inline(w ramach wlasnej wypowiedzi " ")

15. <hr>
    (ang. horizontal - poziomy) znacznik definiujacy linie pozioma (stanowi ewentualny separato
        w ramach sekcji). Innaczej jest to linia pozioma oddzielajaca paragrafy

16. <b></b> <i></i> <u></u>
    (ang. bold, italic, underline) wyboldowanie, pochylenie, podkreslenie tekstu

    Roznice miedzy <strong> a <b>(intuicja):
    -Uzycie b w ramach podkreslenia jakiegos produktu w tekscie nic waznego ale zwracajacego uwage

-------------------------------------------------------------------------------------------------
Kurs 4 CSS
-------------------------------------------------------------------------------------------------
CSS - (cascading style sheets) kaskadowe arkusze stylow. Sluza do opisania wygladu elementow witryn
    ktore zdefiniowano uprzednio w html.

    Kodem CSS mozemy wplywac na polozenie elementow i wzajmne relacje miedzy nimi.

1. Selektor. 
    Do "wybierania" (uchwycenia) elementow HTML, ktore podlegajac stylizowaniu uzywamy tzw. 
    selektorow, zac sam zapis ma taka postac:

    selector
    {
        property: value;
    }

    body
    {
        background-color: gray;
    }

    Znaki biale(spacje, przejscia do nowej lini) sa opcjonalne - mozna je wyciac przygotowujac 
    tzw. "wersje mini"  arkusza. Wowczas plik zajmuje mnie miejsca(nieco szybciej sie wczytuje 
    internaucie przez internet) ale oczywscie taki arkusz sila rzeczy jest malo czytelny. 
    Najczesciej wiec pracujemy na zwyklym arkuszu, a "wersje min" przygotowujem jedynie po 
    zakonczeniu pracy nad witryna(tzw. "wersja produkcyjna kodu", ktora trafi na serwer).

2. Uchwycenie wybranego przez nas div
    - Identyfikatora - (zapisc w html: id="nazwa" | zapis w css: #nazwa) 
                    
                    Regul unikalnosci identyfikatora. W html nie moga istniec dwa atrybuty ID o 
                    takiej samej wartosci(nazwie), nawet jezeli bylyby to atrybuty okreslane dla 
                    roznych znacznikow
                    <div id="pierwszy"> <p id="pierwszy"> ZLE!
                    Atrybtu ID musi jednoznacznie identyfikowac jeden konretny element witryny

    - Klasy - (zapis w html: class="nazwa" | zapis w css= .nazwa)
            
            Jezeli chcemy "uchwycic" tylko jeden element to mzoemy uzyc zarowno id jak i klasy.

            Jezeli jednak "lapiemy" dwa lub wiecej elementow, to pozostaje nam uzyc tylko klasy 
            (gdyz nadanie tego samego ID dwom lub wiecej elementon lamie regule unikalnosci 
            identyfiaktora - blad)
            
            Ustawienie identyfikatora w HTML wymusza na przegladarce obsluge mechanizmu unikanosci
            tegoz elementu(tzw. hierarchia DOM)

            ID powinnismy zastosowwac przede wszystkim w tych elemenatach, ktore zamierzamy pozniej
            uchwycic w skyptach JS, albo ktore beda sluzyc jako tzw. punkty nawigacyjne witryny
            (kotwice nawigacyjne).

            Uzycie id tylko do ostylowania elementu jest slaby pomyslem jednak mozna tak tgo uzyc

            .pudelko - wszystko co jest w klasie "pudelko" 
            .pudelko p - tylko zmienia style dla <p> w klasie pudelko


3. Sposby dolaczeni css do html:
    1. Zewnetrzny arkusz css podpiety do html(w sekcji head)

        <link rel="stylesheet" href"main.css">

    2. Kod css osadzony w pliku html pomiedzy znacznikami <style></style> ktory jest umieszczony 
        w sekcji <head>

        <head>
            <style>
                **tutaj kod css**
            </style>
        </head>

    !Jesli sa podpiete jaki arkusz i kod w html to panuje tutaj hierarchia czyli oznacza to ze pozniejsza 
    definicja stylow bedzie uzyta.!

    3. Stylizowanie inline, czyli wewnatrz atrybutu style wybranego tagu HTML znajdujacego sie w
    sekcji <body>

    <div id="container" style="color: red;">
        Hello World!
    </div>

    !Taki zapis przesloni wszystkie style wczesniej zdefiniowane!

    !Dopisanie slowka !important (!wazny) oznacza iz to wlasnie z tamtad ma byc brany styl css!

4. Znaczenie wartosci:
    Znak myslnika "-" oddaje hierarchie wlasciwsci:

    [wlasciwos glowna]-[atrybut wlasciowosci glownej]

    Im bardziej cos jest po lewej stronie, tym wyzej znajduje sie w tej kaskadzie. Z ego powodu 
    zapisy CSS najepiej zawsze czytac od prawej do lewej.

    body
    {
    background-color: white; - kolor. czeg? backgorund. sekcji? body
    }

    1. background:
         background-color: - definuje color tla.

         backgound-image: url("sciezka pliku") - obrazek tla. url - uniform resource locator(link)
                                                    Cudzyslowie nie jest potrzebne.

         background-repeat: 
            repeat; - powtarzaj(domyslnie ustawione)
            no-repeat; - nie powtarzaj obrazu w tle.
            repeat-x; - powtarzaj w poziomie.
            repeat-y; - powtarzaj w pionie;

         background-position: - zmiana polozenia zdefiniowanego obrazu tla
            [polozenie w poziomie][polozenie w pionie]
            left, right, center, top, bottom | piksele | procenty
    
    2. Tekst
         font-family: - rodzina trzcionki (warto ustawic czcionke w body) 
            np. Arial
        
         font-size: - rozmiar 
            Jednostki:
                
                Zalecane:
                em
                px
                %
                ex
                
                Niezalecane:
                pt
                cm
                mm
                in
                pc
                
                Stale tekstowe:
                xx-small
                x-small
                small
                medium
                large
                x-large
                xx-large
                
                Rozmiar relatywny do elementu nadrzednego:
                smaller
                larger
        
         font-weight:
            Stale tekstowe:
            normlanego - waga 400
            bold - waga 700

            Liczbowe wartosci wag:
            100
            200
            ...
            900

            Rozmiar relatywny do elementu nadrzednego:
            lighter
            bolder

         font-style:
            normal
            italic
            oblique (najbardziej pochylona)

         text-align: - czyli wyrownanie
            left
            center
            right
            justify (dopasowany do kontenera)
            justify-all
            start
            end
            match-parent

         text-transform:
            uppercase
            lowercase
            capitalize (Ala Ma Kota)
            none

         letter-spacing: (odstep pomiedzy znakami)
            np. 2px(rozstrzelenie)

         line-height: (wysokosc linii tekstu)
            np. 140%

5. Odstepy:
    1. padding - odstep nadawany WEWNATRZ elementu
    2. margin - odstep nadawany NA ZEWNATRZ elementu
        marginesy PIONOWE nakladaja sie na siebie(np bloki maja marginesy po 10 px to lacznie maja 10),
        natomiast paddingi sie nie nakladaja(10px jeden padding plus 10 px drugi padding)

        Zapis:
            margin: 10px; - dodaje odstep z kazdej strony

            margin: 10px 20px; - dodaje odstep (gora i dol po 10 px) (prawo i lewo po 20px)

            margin: 10px 20px 30px 40px; - odstep (10px - gora, 20px - prawo, 30px - dol, 40px - lewo)

            margin: 10px 20px 30px; - odstep (10px - gora, 20px - prawo i lewo, 30px - dol)

            margin-left:
            margin-right:
            margin-top:
            margin-bottom:

6. Border
    Ustawienie obramowania elementu - grubosc, rodzaj i kolor lini obwiedni. Zmienia rozmiary 
        kontenera

    border-width: - grubosc linie(w pikselach)
    border-style: - styl lini
    border-color: - kolor lini

    border: 2px solid green; - grubosc, rodzaj i kolor.

7. Lista
    Wyglad listy:
        list-style-type: - typ listy(markera) | mozna zapisac list-style:
                        disc
                        circle
                        square
                        decimal (dzieki temu lista nienumerowana jest numerowana)
                        decimal-leading-zero
                        lower-greek
                        lower-roman
                        lower-latin
                        upper-roman
                        upper-latin
                        lower-alpha
                        upper-alpha
                        armenian
                        georgian

        list-style-image: - obraz jako wlasny marker listy | mozna zapisac list-image:
        
        list-style-position: - pozycja markera
            inside - wewnatrz elementu <li>
            outside - poza elementem <li> (domyslnie)

        list-style: [type] [image] [position]; - jesli nie da sie poprawnie wczytac obrazka to
                                                    lista uzyje typu listy

    Odniesienia do listy w css
        .jakasKlasa ul\
        ul.jakasKlasa / To samo tyle ze na dolnym zapisie dodajemy klase do znacznika ul

        ul.jakasKlasa li - odnosi sie to tylko do znacnzika li w klasie jakasKlasa dla ul i lapie 
                            wszystki li

        ul.jakasKlasa > li - lapie tylko bezposredniego potomka

8. Znacnzik <a>

    text-decoration: - sposob wyroznienia tekstu
        underline, overline, line-through, underline overline, blink, none
        
            text-decoration-line:
            text-decoration-style:
            text-decoration-color:

    Pseudoklasy:
        a:link - link nieodwiedzony
        a:visited - link odwiedzony
        a:hover - link na ktorym jest kursor
        a:active - link na ktory wlasnie klikamy

        Z uzyciem klasy wygladalo by to nastepujaco:
        a.link1:hover

9. Zapis kolorow w css
    1. Stale nazwy np. blue, red

    2. Zapis szesnastkowy
        #76CB3D - # + trzy skladowe RGB po 2 znaki
                Pdzedzial zawiera sie od 00 do FF czyli 16 znakow na jedno miejsce. Dzieki temu 
                zapisu mamy 16 * 16 mozliwosci czyli lacznie od 0 do 255 zapisanie liczby 
                zajmujacej dwa miejsca( FF = 255)

        Jesli zapis sklada sie z tych samych 6 cyfr to mozna to zapisac krocej
        #FFFFFF = #FFF = #fff

    3. Zapis dziesietny
        rgb(118,203,61);

    Przyklad:
    #FFFFFF = rgb(255,255,255) - bialy
    #000000 = rgb(0,0,0) - czarny

    *Lacznie daje nam to 16777216 kolorow

10. Przezroczystość - opacity
    Przedzial od 0 do 1.

    opacity: 1; - nieprzezroczysty
    opacity: 0; - przezroczysty
    
    0.3 = .3

    Dzieki zapisowi koloru w rgba mozemy uzyc przezroczystsci
    
    rgba(R, G, B, A) - czerowny, zielony, niebieski, alpha(nieprzezroczysty)

    rgba(118,203, 61, .3)
    *fallback w starszych przegladarkach nie odczytanie kanalu alpha

11. Pozycja (position)
    Zmiana oryginalne pozycji elementu wzgledem wybranego ukladu Odniesienia

    static - domyslnie

    relative - wobec naturalnego polozenia wynikajacego z wygladu witryny(posiada uklad odniesienia) 
    absolute - nie zaznacza gdzie wczesniej byl a ukladem wspolrzednym jest cala strona a nie kontener
    fixed - ustalona na stale (przewijajac witryne, caly czas jest z przewijaniem)

        Jesli uzyjemy innej niz static to mozemy uzyc:
        left
        right
        top
        bottom

12. Tabela
    *sklejenie ladnie tabeli
    
    table
    {
	    border-spacing: 0;
	    border-collapse: collapse; /* sklejenie tabel w srodku */
    }

13. Laczenie

    th, td
    {
        border: 1px;
    }


-------------------------------------------------------------------------------------------------
Kurs 5 JavaScript
-------------------------------------------------------------------------------------------------
JavaScript - to pelnoprawny jezyk programowania, w ktorym mozemy zastosowac wiele konstrukcji 
    jezykowych, podejmowac decyzje, iterowac, deklarowac funkcje, oblsugiwac zdarzenia, tworzyc 
    obiekty, klasy, metody.

Umieszczanie js na stronie:
    1. W kodzie HTML(slabsze rozdzielenie warstwy zawartosci storny www od te funkcjonalnosci)
        <script>

        </script>

    2. Dolaczenie z zewnetrznego pliku z rozszerzeniem .js(dobre rozdzielenie tagow HTML od kodu JS)
        <script src="nazwapliku.js"></script>

Kod js:

    var - zmienna (moze sie nazywac jak id i nie koliduje)

    Uchwyt sluzy do uchwycenia konkretnego elementu na stronie:
        [zoabcz dokument].[wez z niego element o takim id].[wartosc pola]
    
        docuemnt.getElementByID("tenid").value; - z dokumentu html wybieramy (get) element ktory 
                                                    jest unikalny czyli id i bierzemy z niego wartosc

		document.getElementById("score").innerHTML = a; - innerHTML - wewnatrz HTML tego poejmnika 
                                                        "score" = wartosc powstalego "a"

        NOWSZE:
            <input type="button" value="DODAWANIE" id="przycisk">

            var przyciskNOW = document.getElementById('przycisk');
            przyciskNOW.addEventListener("click", function() {suma(); }); - mozna przypiac dowolna ilosc 
            nasluchiwaczy danego zdarzeni

    Funkcja - wydzielony fragment kodu, ktory nie wykona sie automatycznie sam, tylko zostaje 
                zawolany do pracy w konkretnym miesjcu kodu, ktory nazywamy "wywolanie" funkcji

                Wywolania dokonujemy po nazwie funkcji();

                Kiedy zajdzie zdarzenie click elementu, ktory posiada ustawiony atrybut onclick 
                to wywolaj funkcje nazwana identycznie, jak zapisano w cudzysowie atrybut onclick

                Poniewaz wywolania funckji przypisujemy do zajscia zdarzen w przegladarce, to kod 
                JS wewnatrz funckji stal sie mniej wrazliwy na miejsce podpiecia skryptu

                if(d >= 7 && jest_cyfra(haslo) == true) - nie musi byc przyrownania do true automatycznie
                    sprawdza czy ta funkcja zwroci true

    *Mozna uzywac komentarzy wewnatrz znacznikow <script>

Wyswietlanie kodu html:
    1. alert(); - komunikat
        confirm(); - przycisk yes, no
        prompt(); - wprowadzenie danych

    2. console.log(); - w konsoli przegladarki

	3. document.getElementById("score").innerHTML = a; - wyprowadzenie na stroeni jako tekst

Sklejanie(konkatenacja) napisaow w js nastepuje po przez znak +

	document.getElementById("score").innerHTML = "Wynik działania wynosci: " + sum ;

Przeciazenie operatora
    Zmiana jego wlasnosci np "+". Zamiast sklejac napisy w js ma on dodc liczby.

    Nalezy wykonac parsowanie wartosci bo innaczej porpostu sklei nam liczby

    	a = parseFloat(a);
		b = parseFloat(b);

            parseFloat() - dla liczb zmienno przeinkowych
            parseInt() - dla liczb calkowitych

Jedna funkcja

    <input type="button" value="DODAWANIE" onclick="count(1)">
    ^funckja count doastaje parametr np. 1 aby bylo mozna odruznik ktory przycisk ma co robic

    document.getElementById("wynik").innerHTML = '<span style="color:red;">HASLO JEST PUSTE</span>';
    ^Taki zapis jest w apostrofrach poniewaz okreslenie koloru spacn jest w cudzyslowie

    obiekt.atrybut - odczytanie wartosci z obiektu

    Funkcja powinna byc uniwerslana-przeszczepialna. Nie mozna wyjac zmiennej i dac globalnie gdyz 
    wtedy kod traci swoja przeszczepialnosc

W FOR NIE TRZEBA DEKLROWAC i jak np. int i tylko samo i. var SIE UZYWA JAKO POJEMNIK DO ZMIENNEJ

Dostanie sie do znakow w lancuchu w jezyku JavaScript nie bedzie jak w innych jezykach po przez tablica[i] tylko przez
    operacjie x.charAt(i)

    lub

    x.charCodeAt(i) - dostanie sie do tablicy codu ASCII

-------------------------------------------------------------------------------------------------
Kurs 6 PHP
-------------------------------------------------------------------------------------------------
PHP - interpretowany skryptowy jezyk programowania zaprojektowany do generowania stron internetowych
    i budowania aplikacji webowych w czasie rzeczywistym

Plik .sql = zrzut(tzw. dump) tabel bazy danych, ktory mozemy zaimportowac do PHPMyAdmin

    <form action="index.php" method="

    action - odwoluje sie do pliku php 
    methoda - przeslanie danych
        get - przesyla zmienne wraz z wartoscia w pasku adresu(domyslnie)
        post - przeslanie zmienny w paczce (nie wyswietla sie w pasku adresu)


    <input type="text" name=""> - w php uzywa sie name a nie id jak w js

    <input type="submit" value="Pokaż oceny"> - przycisk zatwierdzajacy

Dane potrzebne do polaczeni sie z baza danych: (dobrze podpiac nowy plik)
    -host (komputer w sieci przechwoujacy baze) ip komputera
    -login i haslo uzytkownika MySQL
    -nazwa bazy danych z ktorej korzystamy

Zmienne:
    $zmienna <- tworzenie zmiennych

Podlaczenie do bazy:

    <?php

        $host = "127.0.0.1";
        $user = "root";
        $pass = "";
        $db = "szkola";

    ?>

    Umieszczanie informacji dostepowych do bazy danych w zewnetznymm pliku pozwala nam w razie
        koniecznosci ich zmiany(przeprowadzaka serwera) dokonac poprawki tylko w tym jendym pliku 
        konfiguracyjnym, zamiast w wielu skryptach php laczacych sie z baza.

    Wiele frameworkow przestrzega tej zasady, umieszczajac kluczowe informacje konfiguracyjne w
        specjalnym pliku, na przyklad:
        
        wp-config.php W WordPressie

Podpinanie php:
    1. include "nazwapliku"; - podpinanie przez nazwe pliku(wazna jest sciezka do pliku)
    2. require "nazwapliku"; - wymaganie, skrypt jesli nie znajdzie pliku to przerwie swoje dzialanie
                                nie bedzie dalej wykonywal kodu

    3. require_once "nazwapliku"; - skorzysta tylko z tego nawet jesli dodamy gdzies inna baze
    
Rozszerzenia koumnikacyjne PHP z baza danych:
    -mysql (najstarsza, nieuzywana)

    -mysqli (wersja "improved" - poprawiona, aktualna)

    -PDO ("PHP Data Objects" - rozszerzenie w pelni obiektowe)

    Podejsci proceduralne - rozdzieleni poszczeglnych dzialan na podprogramy(funkcje) - kazda
                            funkcja wykonuje uniklane, dajace sie jednoznacznie wyroznic dzialanie zwiazane z baza. 
                            Parametry przekazujemy do funkcji jako argumenty w nawiasie

    Podejscie obiektowe - zrealizowanie wspolpracy z baza danych z uzyciem obiektow tworzonych 
                            wg klas. OBiekty posiadaja metody oraz atrybuty(parametry).
                            Rozpoznawcze zapisy: obiekt->atybut lub obiekt->metoda()

API - (application Programming Interface) - interfejs klas, metod, funkcji, mizennych, parametrow 
    ktorych aplikacja PHP uzywa w celu zrealizowania zaplanowanych przez programiste zadac(w tym zadaniu
    chodzi o komunikacje z baza danych)

    Interfejs API moze byc albo proceduralny albo obiektowy. Jezeli jest proceduralny, to oznacza to, ze 
        operacje bazodanowe realizowane sa przez odpowiedznio przygoowane i wywolane funkcji

        Jesli zas jest obiektowy, to oznacza to iz w aplikacji tworzone sa obiekty a operacje bazodanowe 
        realizowane sa poprzez metody wywolywane na rzecz tychze stworzonych obiektow

///////////////////////////////////////////////////////////////////////////////////////////////////
Laczenie do bazy danych:

    include "dbconnect.php";

    $conn = mysqli_connect($host, $user, $pass, $db) or die("Blad polaczenia"); <- logowanie do bazy danych

    mysqli_close(); <-zamykanie polaczeni

*************************************************************************************************
    if(!$conn) // negacja polaczenia, dzieki temu sprawdzamy polaczenie z baza danych
    {
        echo "Błąd połaczeni";
    }
    else
    {
        echo "Git majonez";
    }

    lub uzycie die - dieki temu wiemy czy sie polaczylismy czy nie
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

Raportowanie bledow wylacza sie w php.ini

    display_errors 
        off
    
    error_reporting
        E_ALL

    display_startup_errors
        off

    error_log
        mozna stowrzyc wlasny pliku z logami bledow


    lub 
    uzycie znaku @ przed mysqli_connect

    Operator @ (operator stfu) - wyciszanie bledow ale slabe podejscie!

Podaj nazwe klasy: <input type="text" name="klasa">
$klasa = $_POST["klasa"] // wybieramy z inputa

$q = "SELECT Imie, Nazwisko, Srednia_ocen FROM uczen, klasa WHERE nazwa='2a' AND klasa.id = uczen.id_klasy";
    ^ zapytania w " " a napisy w ''

if(isset($_POST["klasa"])) <- czy istnieje

empty - sprawdza czy istnieje cos w zmiennej

    $result = mysqli_query($conn, $q) or die("Problemy z odczytem danych"); 
            ^ wykonaj zapytanie(polaczenie, i zpaytanie zmienna) i to co dostaniesz wrzuc do zmiennej

mysqli_fetch_row - wyjmowanie dancyh wierszami
mysqli_fetch_assoc - wyjmowanie skojarzeniowe czyli np po imieniu
mysqli_fetch_array - wyjmowanie zarowno numerycznie jak i slownie

    echo $row["Imie"]."<br>"; // tablica row i skojarzenie czyli Imie warto zaznaczyc iz nazwa 
        kolumny w sql ma byc taka sama w petli czyli np duza litera to uzyjemy dzej litery

    while($row = mysqli_fetch_row($result)) // wyjecie jednego wiersza z tabeli danych otrzymanych

var_dump($zmienna) - zrzucenie zawartosci zmiennej na ekran

mysqli_set_charset($conn, "utf8"); // ustawienie kodowania

$ile = mysqli_num_rows($result); // liczba wierszy w naszym rezultacie

exit(); - wyjscie


Wieloliniowe pisanie echo musi byc przy lewej krawedzi

echo<<<END


Sklejanie lancochow odbywa sie kropka

END; <- tutaj po ; nie moze byc zadnych znakow


Przekierowanie do innego skrytpu PHP:
    header('Location: skrypt.php');

Wstrzykiwanie SQL(SQL injection) - metoda ataku, polegajca na przemyceniu w formularzu framentu 
    zapytania SQL

\r\n - koniec lini
\t - tabulatora


OBIEKTOWO:
$conn = mysqli_connect($host, $user, $pass, $db);
$conn = new mysqli($host, #user, $pass, $db);

mysqli_set_charset($conn,"utf8");
$conn->set_charset("utf8");

$result = mysqli_query($conn, $q);
$result = $conn->query($q);

$ile = mysqli_num_rows($result);
$ile = $result->num_rows;

mysqli_close($conn);
$conn->close();

while($row = mysqli_fetch_assoc($result))
{
    echo $row['Imie']."<br>";
}
while($obj = $result->fetch_object())
{
    echo $obj->Imie."<br>";
}


-------------------------------------------------------------------------------------------------
_________________________________________________________________________________________________
